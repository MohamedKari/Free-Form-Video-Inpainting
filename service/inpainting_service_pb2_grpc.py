# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from service import inpainting_service_pb2 as service_dot_inpainting__service__pb2


class InpainterStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Ping = channel.unary_unary(
        '/Inpainter/Ping',
        request_serializer=service_dot_inpainting__service__pb2.Empty.SerializeToString,
        response_deserializer=service_dot_inpainting__service__pb2.Empty.FromString,
        )
    self.StartInpaintingSession = channel.unary_unary(
        '/Inpainter/StartInpaintingSession',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=service_dot_inpainting__service__pb2.StartInpaintingSessionResponse.FromString,
        )
    self.Inpaint = channel.unary_unary(
        '/Inpainter/Inpaint',
        request_serializer=service_dot_inpainting__service__pb2.InpaintRequest.SerializeToString,
        response_deserializer=service_dot_inpainting__service__pb2.InpaintResponse.FromString,
        )
    self.ReportBenchmarks = channel.unary_unary(
        '/Inpainter/ReportBenchmarks',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=service_dot_inpainting__service__pb2.ReportBenchmarksResponse.FromString,
        )


class InpainterServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Ping(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StartInpaintingSession(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Inpaint(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReportBenchmarks(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InpainterServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Ping': grpc.unary_unary_rpc_method_handler(
          servicer.Ping,
          request_deserializer=service_dot_inpainting__service__pb2.Empty.FromString,
          response_serializer=service_dot_inpainting__service__pb2.Empty.SerializeToString,
      ),
      'StartInpaintingSession': grpc.unary_unary_rpc_method_handler(
          servicer.StartInpaintingSession,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=service_dot_inpainting__service__pb2.StartInpaintingSessionResponse.SerializeToString,
      ),
      'Inpaint': grpc.unary_unary_rpc_method_handler(
          servicer.Inpaint,
          request_deserializer=service_dot_inpainting__service__pb2.InpaintRequest.FromString,
          response_serializer=service_dot_inpainting__service__pb2.InpaintResponse.SerializeToString,
      ),
      'ReportBenchmarks': grpc.unary_unary_rpc_method_handler(
          servicer.ReportBenchmarks,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=service_dot_inpainting__service__pb2.ReportBenchmarksResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Inpainter', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
